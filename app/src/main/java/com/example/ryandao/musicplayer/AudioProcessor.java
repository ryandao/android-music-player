package com.example.ryandao.musicplayer;

import android.media.AudioFormat;
import android.media.MediaFormat;
import android.media.MediaPlayer;
import android.media.MediaPlayer.TrackInfo;

import com.ritolaaudio.simplewavio.Utils;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

/**
 * Created by ryandao on 12/6/14.
 */
public class AudioProcessor {
  private File file;

  public AudioProcessor(File file) {
    this.file = file;
  }

  public byte[] process() throws Exception {
      return new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 7, 7, 3, 1, 7, 3, 3, 15, 15, 7, 7, 7, 3, 3, 3, 15, 7, 7, 15, 15, 15, 15, 7, 7, 7, 15, 15, 7, 7, 7, 7, 7, 7, 7, 7, 3, 15, 7, 7, 7, 7, 7, 7, 15, 15, 15, 7, 15, 15, 7, 7, 7, 7, 3, 15, 15, 15, 7, 15, 7, 7, 15, 15, 7, 7, 15, 15, 7, 7, 7, 7, 7, 15, 7, 7, 15, 15, 15, 7, 7, 7, 3, 3, 3, 3, 3, 7, 7, 3, 3, 3, 3, 3, 7, 7, 7, 3, 7, 7, 7, 15, 7, 7, 7, 15, 15, 7, 7, 7, 7, 7, 7, 7, 7, 3, 15, 7, 7, 15, 15, 7, 7, 31, 15, 7, 7, 7, 3, 3, 15, 7, 7, 15, 15, 15, 7, 7, 7, 3, 7, 3, 3, 3, 7, 7, 3, 3, 7, 7, 3, 15, 7, 7, 7, 7, 7, 7, 7, 15, 7, 7, 15, 15, 15, 7, 7, 7, 7, 15, 15, 7, 7, 15, 15, 7, 15, 15, 7, 7, 15, 7, 7, 3, 7, 7, 1, 15, 7, 7, 7, 15, 15, 7, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 3, 3, 3, 3, 7, 15, 15, 15, 15, 15, 15, 15, 15, 31, 15, 31, 31, 15, 15, 15, 15, 31, 15, 31, 31, 15, 15, 15, 31, 15, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 15, 31, 15, 15, 31, 31, 31, 15, 15, 15, 15, 31, 15, 15, 15, 31, 31, 15, 15, 15, 15, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 15, 31, 15, 31, 31, 31, 15, 15, 31, 15, 15, 31, 31, 31, 15, 15, 15, 15, 15, 31, 15, 15, 31, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 15, 31, 31, 31, 31, 31, 31, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 31, 31, 15, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 15, 31, 31, 31, 31, 15, 15, 15, 15, 15, 31, 15, 15, 15, 31, 31, 15, 15, 31, 15, 15, 15, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 31, 15, 15, 31, 15, 15, 15, 15, 15, 31, 31, 31, 15, 15, 15, 15, 15, 15, 31, 31, 15, 31, 31, 31, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 7, 15, 15, 15, 15, 15, 7, 7, 7, 7, 3, 3, 3, 3, 3, 7, 3, 3, 15, 15, 7, 3, 7, 7, 7, 7, 15, 7, 7, 7, 15, 15, 15, 7, 7, 7, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 15, 15, 15, 15, 15, 15, 7, 15, 15, 7, 7, 7, 7, 7, 3, 3, 3, 1, 1, 1, 1, 7, 3, 3, 3, 7, 7, 3, 7, 7, 7, 7, 7, 7, 7, 7, 15, 7, 7, 7, 7, 7, 3, 3, 1, 1, 7, 7, 3, 3, 7, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 3, 3, 3, 7, 7, 3, 1, 15, 15, 7, 7, 7, 7, 3, 3, 1, 0, 0, 1, 1, 3, 3, 3, 1, 3, 7, 3, 7, 7, 15, 7, 7, 7, 15, 15, 15, 15, 15, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 7, 15, 15, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 7, 3, 7, 7, 15, 15, 7, 7, 7, 15, 15, 7, 7, 15, 7, 3, 7, 7, 7, 15, 7, 7, 7, 7, 3, 7, 7, 7, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 15, 7, 7, 7, 15, 15, 15, 7, 7, 7, 7, 15, 15, 7, 15, 31, 31, 15, 15, 15, 15, 15, 15, 15, 7, 15, 7, 7, 7, 15, 15, 15, 15, 15, 15, 7, 15, 15, 15, 15, 15, 15, 15, 31, 31, 15, 15, 15, 7, 7, 15, 15, 15, 7, 31, 31, 15, 31, 31, 31, 31, 31, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 3, 3, 7, 7, 3, 7, 7, 7, 3, 7, 15, 7, 7, 7, 7, 3, 3, 15, 15, 15, 15, 15, 7, 7, 7, 7, 3, 7, 7, 7, 3, 15, 7, 7, 7, 7, 7, 7, 15, 15, 7, 7, 7, 7, 7, 15, 15, 7, 7, 31, 15, 15, 15, 15, 15, 7, 7, 7, 7, 3, 3, 7, 7, 7, 3, 3, 3, 15, 7, 7, 7, 7, 7, 7, 15, 15, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 7, 15, 15, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 15, 15, 31, 31, 31, 15, 15, 7, 7, 15, 7, 7, 3, 15, 7, 7, 3, 7, 7, 7, 7, 3, 3, 7, 15, 7, 7, 15, 15, 7, 15, 15, 15, 15, 15, 7, 7, 7, 15, 15, 7, 7, 7, 7, 7, 3, 3, 3, 3, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 31, 31, 31, 15, 31, 15, 15, 31, 31, 31, 15, 15, 63, 31, 31, 31, 63, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 63, 31, 31, 31, 31, 31, 15, 15, 15, 15, 31, 31, 31, 31, 63, 31, 31, 31, 31, 31, 31, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 15, 15, 15, 15, 31, 15, 15, 15, 31, 31, 15, 31, 15, 15, 15, 31, 31, 15, 15, 15, 15, 15, 15, 15, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 15, 15, 15, 31, 31, 31, 31, 63, 31, 31, 63, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 63, 31, 31, 31, 31, 15, 15, 15, 15, 15, 31, 31, 31, 63, 31, 63, 31, 31, 31, 31, 31, 31, 31, 63, 63, 63, 63, 63, 31, 31, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 31, 31, 31, 31, 31, 15, 31, 15, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 31, 15, 15, 7, 7, 7, 15, 7, 7, 15, 7, 7, 7, 7, 7, 3, 3, 3, 3, 7, 7, 3, 3, 7, 3, 3, 7, 7, 3, 3, 7, 7, 15, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 15, 7, 15, 15, 15, 7, 7, 7, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 15, 15, 15, 15, 15, 7, 7, 7, 15, 15, 15, 15, 7, 15, 15, 7, 31, 15, 15, 15, 31, 15, 7, 7, 7, 7, 7, 15, 15, 7, 7, 3, 3, 3, 15, 7, 7, 3, 15, 7, 15, 15, 7, 7, 7, 15, 15, 15, 15, 31, 15, 15, 15, 7, 15, 7, 15, 7, 7, 15, 15, 15, 7, 15, 15, 15, 15, 31, 15, 15, 15, 15, 7, 7, 15, 7, 7, 15, 15, 15, 7, 7, 7, 7, 7, 15, 15, 15, 15, 7, 7, 15, 15, 15, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 7, 31, 15, 7, 7, 7, 3, 3, 3, 3, 7, 7, 7, 7, 3, 7, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 31, 15, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 15, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 63, 31, 63, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 15, 7, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 7, 3, 3, 3, 31, 31, 15, 7, 7, 3, 3, 15, 15, 7, 15, 63, 31, 31, 31, 31, 7, 15, 15, 15, 15, 7, 15, 7, 7, 31, 31, 15, 15, 31, 31, 15, 7, 15, 31, 31, 15, 15, 7, 31, 31, 31, 15, 31, 31, 7, 7, 31, 15, 15, 15, 31, 15, 15, 31, 31, 15, 63, 63, 31, 15, 7, 15, 7, 15, 15, 15, 7, 31, 31, 15, 7, 31, 7, 7, 7, 7, 3, 3, 7, 7, 7, 31, 31, 15, 7, 31, 15, 15, 7, 7, 15, 15, 31, 15, 15, 7, 31, 15, 15, 31, 31, 7, 7, 31, 15, 7, 15, 7, 7, 7, 15, 15, 7, 31, 31, 31, 7, 7, 7, 3, 3, 15, 7, 7, 31, 63, 31, 15, 31, 7, 15, 7, 7, 7, 7, 7, 7, 7, 31, 31, 15, 7, 31, 31, 15, 7, 7, 15, 31, 15, 15, 7, 7, 31, 31, 15, 63, 31, 7, 7, 31, 31, 15, 15, 15, 7, 7, 31, 15, 15, 15, 31, 31, 15, 15, 15, 15, 15, 15, 15, 15, 31, 63, 15, 15, 63, 7, 7, 7, 7, 7, 7, 15, 15, 7, 3, 31, 15, 7, 31, 31, 7, 3, 15, 15, 31, 15, 15, 15, 7, 31, 31, 15, 63, 31, 7, 7, 31, 31, 15, 7, 15, 7, 7, 7, 7, 7, 7, 31, 15, 15, 31, 31, 31, 31, 31, 15, 15, 31, 63, 31, 15, 63, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 63, 63, 31, 63, 63, 63, 63, 63, 63, 63, 31, 31, 31, 31, 63, 63, 63, 31, 63, 31, 31, 63, 31, 31, 31, 31, 31, 31, 31, 63, 31, 31, 63, 63, 31, 31, 31, 31, 63, 31, 31, 31, 31, 63, 31, 31, 63, 31, 31, 31, 63, 31, 31, 31, 63, 31, 31, 31, 31, 31, 31, 63, 63, 63, 63, 63, 63, 63, 63, 31, 31, 63, 63, 31, 31, 63, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 63, 31, 31, 63, 31, 31, 31, 31, 31, 31, 31, 31, 15, 15, 63, 31, 31, 63, 63, 15, 15, 63, 31, 31, 31, 31, 15, 15, 31, 31, 31, 15, 63, 31, 31, 31, 31, 31, 31, 31, 31, 31, 63, 63, 63, 31, 63, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 63, 63, 63, 63, 63, 31, 31, 31, 31, 63, 31, 31, 31, 63, 63, 63, 31, 63, 31, 31, 31, 63, 63, 63, 31, 63, 31, 31, 63, 63, 31, 31, 63, 63, 63, 31, 31, 63, 31, 31, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 31, 63, 63, 31, 63, 31, 63, 63, 63, 31, 31, 31, 31, 31, 31, 31, 31, 31, 63, 31, 31, 31, 31, 31, 63, 31, 63, 31, 31, 63, 31, 63, 31, 31, 63, 31, 31, 31, 31, 31, 31, 31, 15, 15, 15, 15, 15, 7, 7, 15, 7, 7, 7, 3, 3, 3, 7, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 7, 7, 7, 3, 3, 3, 1, 7, 15, 15, 7, 15, 15, 15, 15, 31, 15, 7, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15, 15, 15, 15, 15, 15, 15, 7, 15, 7, 7, 3, 3, 7, 7, 7, 7, 3, 3, 3, 15, 7, 7, 7, 7, 7, 7, 15, 7, 7, 7, 7, 7, 7, 3, 1, 1, 7, 7, 7, 7, 3, 3, 1, 1, 3, 3, 3, 15, 15, 15, 15, 7, 15, 3, 15, 15, 15, 7, 15, 7, 7, 3, 3, 3, 1, 1, 3, 15, 15, 15, 15, 15, 31, 31, 31, 15, 15, 15, 15, 15, 15, 15, 15, 31, 31, 31, 15, 15, 7, 3, 3, 3, 3, 3, 15, 15, 15, 31, 31, 15, 15, 15, 15, 15, 31, 31, 31, 31, 31, 31, 15, 7, 15, 7, 7, 31, 31, 15, 31, 31, 15, 31, 31, 31, 31, 31, 31, 31, 15, 31, 31, 7, 15, 63, 63, 63, 63, 63, 63, 63, 63, 63, 31, 63, 63, 63, 31, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 31, 31, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 31, 63, 31, 63, 63, 63, 63, 63, 63, 31, 31, 15, 15, 31, 15, 15, 15, 31, 15, 31, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 7, 7, 3, 3, 1, 1, 3, 3, 15, 15, 31, 31, 31, 31, 31, 15, 15, 15, 15, 15, 31, 15, 15, 15, 7, 7, 15, 15, 15, 7, 7, 7, 7, 7, 7, 7, 7, 15, 15, 7, 7, 3, 3, 1, 7, 7, 3, 3, 15, 7, 7, 3, 3, 1, 1, 1, 0, 0, 7, 7, 7, 7, 15, 15, 15, 15, 15, 15, 15, 15, 7, 15, 7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 7, 7, 7, 7, 7, 15, 15, 15, 7, 15, 15, 15, 15, 15, 15, 7, 7, 3, 3, 7, 7, 7, 3, 7, 7, 7, 7, 3, 1, 3, 3, 1, 1, 0, 7, 3, 3, 1, 0, 0, 0, 7, 7, 3, 7, 7, 7, 3, 7, 7, 7, 7, 7, 7, 3, 3, 1, 1, 1, 7, 3, 3, 1, 1, 1, 0, 0, 0, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

//    ArrayList<Double> result = new ArrayList<Double>();
//    double sampleRate = 44100.0;
//
//    double [][] inputAudio = Utils.WAVToFloats(this.file);
//    System.out.println("inputAudio.length = " + inputAudio.length);
//
//      int BLOCK = (int) Math.round(sampleRate * 0.1);
//
//      for(int start = 0; start < inputAudio.length; start += BLOCK) {
//          double sum = 0;
//          ArrayList<Double> cur = new ArrayList<Double>();
//          for(int i = 0; i < BLOCK && start + i < inputAudio.length; ++i) {
//              cur.add(inputAudio[start + i][0]);
////                sum = Math.max(sum, Math.abs(inputAudio[start + i][0]));
////                sum += inputAudio[start + i][0] * inputAudio[start+i][0];
//          }
//          Collections.sort(cur);
//          result.add(cur.get(cur.size()-1));
////            result.add(cur.get(cur.size() / 100 * 95));
//      }
//
////        System.out.println("Done calc");
//
//      byte[] data = new byte[result.size() + 1];
//
//      final int nChunk = 5;
//      double[] minValue = new double[nChunk];
//      double[] maxValue = new double[nChunk];
//
//      for(int i = 0; i < result.size(); ++i) {
//          int b = getBlock(i);
//          minValue[b] = Math.min(minValue[b], result.get(i));
//          maxValue[b] = Math.max(maxValue[b], result.get(i));
//      }
//      System.out.println("max = " + maxValue[0]);
//      System.out.println("min = " + minValue[0]);
//
//      for(int i = 0; i < result.size(); ++i) {
//          int b = getBlock(i);
//          int cur;
//          cur = (int) Math.round(Math.log(result.get(i) * 43) / Math.log(1.9));
////            cur = (int) Math.round((result.get(i) - minValue[b]) * 6.0 / (maxValue[b] - minValue[b]));
//          if (cur < 0) cur = 0;
//          if (cur > 6) cur = 6;
//
//          if (cur == 0) data[i] = 0;
//          else data[i] = (byte) ((1 << (cur)) - 1);
//      }
//
//    data[data.length-1] = 0x40;
//    System.out.println(Arrays.toString(data));
//    return data;
  }

    private int getBlock(int i) {
        return 0;
    }
}
